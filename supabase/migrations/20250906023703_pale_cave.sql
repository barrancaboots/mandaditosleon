-- MandaditosLeón - Script de Base de Datos para Supabase
-- Versión 1.6
-- Este script configura las tablas, tipos, funciones y RLS.
-- Versión 1.6: Se elimina la creación automática de usuarios de demo para evitar errores de permisos. 
-- Los usuarios ahora deben crearse manualmente desde el Dashboard de Supabase.

-- =================================================================
-- 0. SCRIPT DE LIMPIEZA (RESETEO)
-- Elimina los objetos existentes para asegurar una creación limpia.
-- =================================================================

-- Eliminar el trigger en la tabla de autenticación
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Eliminar las tablas. CASCADE elimina objetos dependientes como las políticas RLS.
DROP TABLE IF EXISTS public.ratings CASCADE;
DROP TABLE IF EXISTS public.orders CASCADE;
DROP TABLE IF EXISTS public.products CASCADE;
DROP TABLE IF EXISTS public.categories CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.system_config CASCADE;

-- Eliminar funciones auxiliares
DROP FUNCTION IF EXISTS public.handle_new_user();
DROP FUNCTION IF EXISTS public.is_admin();

-- Eliminar tipos personalizados (ENUMS)
DROP TYPE IF EXISTS public.order_status;
DROP TYPE IF EXISTS public.user_role;
DROP TYPE IF EXISTS public.vehicle_type;


-- =================================================================
-- 1. CREACIÓN DE TIPOS PERSONALIZADOS (ENUMS)
-- =================================================================
CREATE TYPE public.user_role AS ENUM ('cliente', 'repartidor', 'admin');
CREATE TYPE public.order_status AS ENUM ('pendiente', 'buscando_repartidor', 'aceptado', 'en_camino', 'entregado', 'cancelado');
CREATE TYPE public.vehicle_type AS ENUM ('motocicleta', 'coche', 'bicicleta');

-- =================================================================
-- 2. CREACIÓN DE TABLAS
-- =================================================================

-- Tabla de perfiles (extiende auth.users)
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT,
  phone_number TEXT UNIQUE,
  role user_role NOT NULL DEFAULT 'cliente',
  vehicle vehicle_type,
  is_available BOOLEAN DEFAULT false,
  current_lat DOUBLE PRECISION,
  current_lng DOUBLE PRECISION,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.profiles IS 'Almacena perfiles públicos de usuarios, vinculados a la autenticación de Supabase.';

-- Tabla de pedidos
CREATE TABLE public.orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  client_id UUID NOT NULL REFERENCES public.profiles(id),
  driver_id UUID REFERENCES public.profiles(id),
  status order_status NOT NULL DEFAULT 'pendiente',
  pickup_address TEXT NOT NULL,
  delivery_address TEXT NOT NULL,
  description TEXT NOT NULL,
  price NUMERIC(10, 2) NOT NULL,
  pickup_lat DOUBLE PRECISION NOT NULL,
  pickup_lng DOUBLE PRECISION NOT NULL,
  delivery_lat DOUBLE PRECISION NOT NULL,
  delivery_lng DOUBLE PRECISION NOT NULL,
  accepted_at TIMESTAMPTZ,
  completed_at TIMESTAMPTZ
);
COMMENT ON TABLE public.orders IS 'Contiene todos los pedidos de entregas de la aplicación.';

-- Tabla de calificaciones
CREATE TABLE public.ratings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,
  client_id UUID NOT NULL REFERENCES public.profiles(id),
  driver_id UUID NOT NULL REFERENCES public.profiles(id),
  rating SMALLINT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(order_id)
);
COMMENT ON TABLE public.ratings IS 'Calificaciones y comentarios de clientes a repartidores por pedidos completados.';

-- Tabla de configuración del sistema
CREATE TABLE public.system_config (
    id INT PRIMARY KEY DEFAULT 1 CHECK (id = 1),
    is_demo_mode BOOLEAN NOT NULL DEFAULT false,
    app_name TEXT,
    app_version TEXT
);

-- Tabla de categorías de productos
CREATE TABLE public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    image_base64 TEXT,
    is_demo_item BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Tabla de productos
CREATE TABLE public.products (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    price NUMERIC(10, 2) NOT NULL,
    unit_of_measure TEXT,
    image_base64 TEXT,
    category_id BIGINT NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
    is_demo_item BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW()
);


-- =================================================================
-- 3. FUNCIONES Y TRIGGERS
-- =================================================================

-- Función para crear un perfil de usuario automáticamente
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger que ejecuta la función al crear un usuario en auth.users
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Función auxiliar para chequear el rol de administrador
CREATE OR REPLACE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
    RETURN (
        SELECT role
        FROM public.profiles
        WHERE id = auth.uid()
    ) = 'admin';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- =================================================================
-- 4. HABILITACIÓN DE SEGURIDAD A NIVEL DE FILA (RLS)
-- =================================================================

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ratings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.system_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;


-- =================================================================
-- 5. POLÍTICAS DE SEGURIDAD (RLS POLICIES)
-- =================================================================

-- Políticas para `profiles`
CREATE POLICY "Los usuarios pueden ver todos los perfiles" ON public.profiles FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Los usuarios pueden insertar su propio perfil" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Los usuarios pueden actualizar su propio perfil" ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- Políticas para `orders`
CREATE POLICY "Los usuarios autenticados pueden ver pedidos" ON public.orders FOR SELECT USING ((client_id = auth.uid()) OR (driver_id = auth.uid()) OR (((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'repartidor' AND status = 'buscando_repartidor')));
CREATE POLICY "Los clientes pueden crear pedidos para sí mismos" ON public.orders FOR INSERT WITH CHECK (auth.uid() = client_id AND (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'cliente');
CREATE POLICY "Clientes y repartidores pueden actualizar pedidos" ON public.orders FOR UPDATE USING ((client_id = auth.uid() AND status IN ('pendiente', 'buscando_repartidor')) OR (driver_id = auth.uid() AND status IN ('aceptado', 'en_camino'))) WITH CHECK ((client_id = auth.uid() AND status IN ('pendiente', 'buscando_repartidor')) OR (driver_id = auth.uid() AND status IN ('aceptado', 'en_camino')));

-- Políticas para `ratings`
CREATE POLICY "Todos pueden ver las calificaciones" ON public.ratings FOR SELECT USING (true);
CREATE POLICY "Los clientes pueden crear calificaciones para sus pedidos entregados" ON public.ratings FOR INSERT WITH CHECK (client_id = auth.uid() AND (SELECT status FROM public.orders WHERE id = order_id) = 'entregado');

-- Políticas para `system_config`
CREATE POLICY "Cualquiera puede leer la configuración del sistema" ON public.system_config FOR SELECT USING (true);
CREATE POLICY "Los administradores pueden actualizar la configuración" ON public.system_config FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Políticas para `categories`
CREATE POLICY "Cualquiera puede leer las categorías" ON public.categories FOR SELECT USING (true);
CREATE POLICY "Los administradores pueden gestionar las categorías" ON public.categories FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Políticas para `products`
CREATE POLICY "Cualquiera puede leer los productos" ON public.products FOR SELECT USING (true);
CREATE POLICY "Los administradores pueden gestionar los productos" ON public.products FOR ALL USING (is_admin()) WITH CHECK (is_admin());


-- =================================================================
-- 6. INSERCIÓN DE DATOS DE DEMOSTRACIÓN
-- =================================================================

-- Activar el modo demo en la configuración
INSERT INTO public.system_config (id, is_demo_mode, app_name, app_version)
VALUES (1, true, 'Mandaditos Leon', '1.5')
ON CONFLICT (id) DO UPDATE SET
is_demo_mode = EXCLUDED.is_demo_mode,
app_name = EXCLUDED.app_name,
app_version = EXCLUDED.app_version;

-- Insertar categorías de demostración con imagen base64
INSERT INTO public.categories (name, is_demo_item, image_base64) VALUES
('Carnes y Pescados', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('Abarrotes', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('Articulos de limpieza', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('Panaderia', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('CarnesFrias', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('Ferreteria', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('Perfumeria', true, 'PHN2ZyB3aWR 0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('Bebes', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQ geD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg=='),
('Ropa', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZTBjMGUwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNjY2IiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBkb21pbmFudC1iYXNlbGluZT0ibWlkZGxlIj5DYXRlZ29yw61hPC90ZXh0Pjwvc3ZnPg==')
ON CONFLICT (name) DO NOTHING;

-- Insertar productos de demostración con imagen base64
INSERT INTO public.products (name, category_id, price, description, unit_of_measure, is_demo_item, image_base64) VALUES
('Salmón', (SELECT id from public.categories WHERE name = 'Carnes y Pescados'), 250, 'Filete de salmón fresco.', 'Kilogramo (Kg)', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZjBmMGYwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNzciIHRleHQtYW5jaG9yPSJtaWRkbGUiIGRvbWluYW50LWJhc2VsaW5lPSJtaWRkbGUiPlByb2R1Y3RvPC90ZXh0Pjwvc3ZnPg=='),
('Atún', (SELECT id from public.categories WHERE name = 'Carnes y Pescados'), 180, 'Atún fresco en filete.', 'Kilogramo (Kg)', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZjBmMGYwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNzciIHRleHQtYW5jaG9yPSJtaWRkbGUiIGRvbWluYW50LWJhc2VsaW5lPSJtaWRkbGUiPlByb2R1Y3RvPC90ZXh0Pjwvc3ZnPg=='),
('Carne molida de res', (SELECT id from public.categories WHERE name = 'Carnes y Pescados'), 120, 'Carne de res magra.', 'Kilogramo (Kg)', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZjBmMGYwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNzciIHRleHQtYW5jaG9yPSJtaWRkbGUiIGRvbWluYW50LWJhc2VsaW5lPSJtaWRkbGUiPlByb2R1Y3RvPC90ZXh0Pjwvc3ZnPg=='),
('Pechuga de pollo', (SELECT id from public.categories WHERE name = 'Carnes y Pescados'), 95, 'Pechuga de pollo sin hueso ni piel.', 'Kilogramo (Kg)', true, 'PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cmVjdCB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIiBmaWxsPSIjZjBmMGYwIi8+PHRleHQgeD0iNTAlIiB5PSI1NSUiIGZvbnQtZmFtaWx5PSJzYW5zLXNlcmlmIiBmb250LXNpemU9IjE0IiBmaWxsPSIjNzciIHRleHQtYW5jaG9yPSJtaWRkbGUiIGRvbWluYW50LWJhc2VsaW5lPSJtaWRkbGUiPlByb2R1Y3RvPC90ZXh0Pjwvc

-- supabase/migrations/20250906023703_pale_cave.sql

-- =================================================================
-- 7. TABLA Y POLÍTICAS PARA LOGS DEL SISTEMA (AÑADIR AL FINAL DEL ARCHIVO)
-- =================================================================

-- Crear un tipo ENUM para los niveles de log
CREATE TYPE public.log_level AS ENUM ('info', 'warn', 'error', 'debug');

-- Crear la tabla de logs
CREATE TABLE public.logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  level log_level NOT NULL DEFAULT 'info',
  message TEXT NOT NULL,
  metadata JSONB, -- Para guardar datos adicionales como el stack trace de un error
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.logs IS 'Registra eventos y errores de la aplicación para depuración.';

-- Habilitar RLS para la tabla de logs
ALTER TABLE public.logs ENABLE ROW LEVEL SECURITY;

-- Políticas de seguridad para `logs`
-- Nadie puede ver los logs por defecto. Esto previene que un usuario vea los logs de otro.
-- Solo los administradores podrán leer todos los logs.
CREATE POLICY "Los administradores pueden ver todos los logs"
  ON public.logs FOR SELECT
  USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

-- Permitir que cualquier usuario autenticado inserte logs.
-- Esto es seguro porque no pueden leer los logs de otros.
CREATE POLICY "Los usuarios autenticados pueden insertar logs"
  ON public.logs FOR INSERT
  WITH CHECK ( auth.role() = 'authenticated' );